package net.beotel.controllers;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import net.beotel.models.OutgoingCall;
import net.beotel.models.OutgoingCallTemplate;
import net.beotel.payload.response.MessageResponse;
import net.beotel.repository.OutgoingCallRepository;
import net.beotel.repository.OutgoingCallTemplateRepository;
import net.beotel.services.OutgoingCallTemplateService;
import net.beotel.util.ExcelHelper;
import net.beotel.util.OutgoingCallContactList;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/outgoing")
public class OutgoingCallController {

	private static final String PHONE_NUMBER_COL_NAME = "Telefon";
	private static final String NAME_SURNAME_COL_NAME = "Ime";
	private static final String DATE_COL_NAME = "Datum";

	@Autowired
	OutgoingCallRepository outgoingCallRepository;

	@Autowired
	OutgoingCallTemplateRepository outgoingCallTemplateRepository;
	
	@Autowired
	OutgoingCallTemplateService outgoingCallTemplateService;

	/*
	 * @GetMapping("/outgoingCallTemplate")
	 * 
	 * @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
	 * //ovu anotaciju mozemo da koristimo
	 * zahvaljujuci @EnableGlobalMethodSecurity(prePostEnabled = true) public String
	 * outgoingCallTemplateAccess() { // iz WebSecurity konfiguracije! return
	 * "OutgoingCallTemplate Content."; }
	 */

	@GetMapping("/outgoingCallTemplate")
	// @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
	// //ovu anotaciju mozemo da koristimo zahvaljujuci
	// @EnableGlobalMethodSecurity(prePostEnabled = true)
	public Iterable<OutgoingCallTemplate> findTemplateList() {
		try {
			Iterable<OutgoingCallTemplate> list = outgoingCallTemplateService.loadAllTempaltes();
			return list;

		} catch (Exception e) {

		}
		return null;
	}
	
	@PostMapping("/outgoingCallTemplate")
	public ResponseEntity<?> createNewTempalte(@RequestBody OutgoingCallTemplate template) {
		outgoingCallTemplateRepository.save(template);
		return ResponseEntity.ok(new MessageResponse("Uspesno snimljen novi templejt u bazu!"));
	}

	

	@GetMapping("/outgoingCallList")
	public Iterable<OutgoingCallTemplate> sendTemplateList() {
		try {
			Iterable<OutgoingCallTemplate> list = outgoingCallTemplateRepository.findAll();
			return list;
		} catch (Exception ex) {
		}
		return null;

	}
	
	
	/*Lista koja vraca stare liste, da bi mogli da je popune*/
	@GetMapping("/oldOutgoingCallList")
	public List<String> sendOldOutgoingCallLists(@RequestBody int templateId){
		List<String> oldList=outgoingCallTemplateService.findOutgoingCallNamesByTemplate(templateId);
		
		return oldList;
	}
	

	@PostMapping("/postOutgoingCallList")
	public ResponseEntity<?> postOutgoingCallList(@ModelAttribute OutgoingCallContactList list) { // form data se nalazi
																									// u Objektu i fajl
																									// ce da se izvuce
																									// putem getera
		if (list == null) {
			return ResponseEntity.badRequest().body(new MessageResponse("Error: Prosledjeni podaci su null!"));
		}
		System.out.println(list.getTemplateId());
		// Dohvatanje fajlova i konvertovanje
		ClassLoader classLoader = getClass().getClassLoader();

		MultipartFile uploadedFile = list.getFile();
		File outgoingCallFile = new File(classLoader.getResource(".").getFile() + "/template.xlsx"); // pronalazi resources paket i cuva fajl do sledeceg builda
		try {
			if (outgoingCallFile.createNewFile()) {
				System.out.println("File is created!");
			} else {
				System.out.println("File already exists.");
			}
			 
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		try {
			uploadedFile.transferTo(outgoingCallFile); // konvertovanje iz MultipartFile u File, da bi moglo da se
														// parsira
		} catch (IllegalStateException | IOException e) {
			e.printStackTrace();
		}

		// Parsiranje fajla
		ExcelHelper excelHelper = new ExcelHelper();
		Map<String, Integer> columnMap = new HashMap<>();
		int idTemplate = list.getTemplateId();
		String listName=list.getName();
		String note=list.getNote();

		List<XSSFRow> rowList = excelHelper.parseXLSFile(outgoingCallFile, columnMap);
		processRowsPhoneRelated(rowList, columnMap, idTemplate,listName,note);

		return ResponseEntity.ok(new MessageResponse("Uspesno prosledjeni podaci o fajlu i sablonu!"));
	}


	private void processRowsPhoneRelated(List<XSSFRow> rowList, Map<String, Integer> columnMap, int idTemplate, String listName,
			String note) {
		String contactPhone = null; 
		String contactName = null;
		String dateOfImport = null;
		
		DataFormatter formatter = new DataFormatter(Locale.US);
		
		Long templateId=Long.valueOf(idTemplate);
		OutgoingCallTemplate out=outgoingCallTemplateRepository.getOne(templateId);
		
		for (XSSFRow row : rowList) {
			contactName = formatter.formatCellValue(row.getCell(columnMap.get(NAME_SURNAME_COL_NAME)));
			contactPhone = formatter.formatCellValue(row.getCell(columnMap.get(PHONE_NUMBER_COL_NAME)));
			dateOfImport = formatter.formatCellValue(row.getCell(columnMap.get(DATE_COL_NAME)));
			Date date = null;
			try {
				date = new SimpleDateFormat("dd/MM/yyyy").parse(dateOfImport);
			} catch (ParseException e) {

				e.printStackTrace();
			}
			OutgoingCall outgoingCall = new OutgoingCall(contactName, contactPhone, date, out, listName,note);

			// Cuvanje u bazu
			outgoingCallRepository.save(outgoingCall);

			// AKo su polja prazna
			/*
			 * if((contactPhone.isEmpty() && contactName.isEmpty() &&
			 * dateOfImport.isEmpty())) {
			 * 
			 * } else { }
			 */
		}
	}

}
