package net.beotel.controllers;


import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.validation.Valid;

import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import net.beotel.models.OutgoingCall;
import net.beotel.models.OutgoingCallTemplate;
import net.beotel.payload.response.MessageResponse;
import net.beotel.repository.OutgoingCallRepository;
import net.beotel.repository.OutgoingCallTemplateRepository;
import net.beotel.util.ExcelHelper;
import net.beotel.util.OutgoingCallContactList;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/outgoing")
public class OutgoingCallController {
	
	private static final String PHONE_NUMBER_COL_NAME="Telefon";
	private static final String NAME_SURNAME_COL_NAME="Ime";
	private static final String DATE_COL_NAME="Datum";
	
	@Autowired
	OutgoingCallRepository outgoingCallRepository;

	
	@Autowired
	OutgoingCallTemplateRepository outgoingCallTemplateRepository;
	
	
	/*
	 * @GetMapping("/outgoingCallTemplate")
	 * 
	 * @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
	 * //ovu anotaciju mozemo da koristimo
	 * zahvaljujuci @EnableGlobalMethodSecurity(prePostEnabled = true) public String
	 * outgoingCallTemplateAccess() { // iz WebSecurity konfiguracije! return
	 * "OutgoingCallTemplate Content."; }
	 */
	
	@GetMapping("/outgoingCallTemplate")
	//@PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')") //ovu anotaciju mozemo da koristimo zahvaljujuci @EnableGlobalMethodSecurity(prePostEnabled = true) 
	public Iterable<OutgoingCallTemplate> findTemplateList() {
		try {	
		Iterable<OutgoingCallTemplate> list = outgoingCallTemplateRepository.findAll();
		return list;
		
		}catch (Exception e){
			
		}
		return null;
	}
	
	@GetMapping("/outgoingCallListImport")
	@PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')") //ovu anotaciju mozemo da koristimo zahvaljujuci @EnableGlobalMethodSecurity(prePostEnabled = true) 
	public String outgoingCallCreateList() {												// iz WebSecurity konfiguracije!
		return "Here should be info about existing lists and templates.";
	}
	
	@PostMapping("/postExcelFile")
	public ResponseEntity<?> postExcelFiles(@Valid @RequestBody MultipartFile xlsFile ) {
		if(xlsFile==null) {
			return ResponseEntity.badRequest().body(new MessageResponse("Error: Fajl je null!"));
		}
		
		ClassLoader classLoader = getClass().getClassLoader();
		File outgoingCallFile = new File(classLoader.getResource(".").getFile() + "/template.xlsx"); //pronalazi resources paket i privremeno cuva fajl tu (do sledeceg builda)
		try {
			if (outgoingCallFile.createNewFile()) {
			    System.out.println("File is created!");
			} else {
			    System.out.println("File already exists.");
			}
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		
		ExcelHelper excelHelper=new ExcelHelper();
		Map<String, Integer> columnMap=new HashMap<>();
		
		try {
			xlsFile.transferTo(outgoingCallFile); //konvertovanje iz MultipartFile u File, da bi moglo da se parsira
		} catch (IllegalStateException | IOException e) {
			e.printStackTrace();
		}
		
		List<XSSFRow> rowList=excelHelper.parseXLSFile(outgoingCallFile, columnMap); 
		processRowsPhoneRelated(rowList,columnMap);
		
		return ResponseEntity.ok(new MessageResponse("Uspesno prosledjen fajl!"));
	}
	
	
	@PostMapping("/postOutgoingCallList")
	public ResponseEntity<?> postOutgoingCallList(@RequestBody OutgoingCallContactList list){ //form data se nalazi u Objektu i fajl ce da se izvuce putem getera
		
		return ResponseEntity.ok(new MessageResponse("Uspesno prosledjeni podaci!"));
	}
	
	
	@SuppressWarnings("unused")
	private void processRowsPhoneRelated(List<XSSFRow> rowList, Map<String, Integer> columnMap) { //DODATI U ARGUMENTE METODE TEMPLEJT, NAPOMENU, I SVE IZ FORME STO FALI
		String contactPhone = null;																	//POSLE DODATI TE ARGUMENTE U ARGUMENTE KAD SE KREIRA OBJEKAT I SMESTA U BAZU
		String contactName = null;
		String dateOfImport=null;
		DataFormatter formatter = new DataFormatter(Locale.US);
		for (XSSFRow row : rowList) {
			contactName = formatter.formatCellValue(row.getCell(columnMap.get(NAME_SURNAME_COL_NAME)));
			contactPhone = formatter.formatCellValue(row.getCell(columnMap.get(PHONE_NUMBER_COL_NAME)));
			dateOfImport=formatter.formatCellValue(row.getCell(columnMap.get(DATE_COL_NAME))); //dodati ovaj datum u kolonu CREATION_DATE
			OutgoingCall outgoingCall = new OutgoingCall(contactName, contactPhone,null);
			
			//Cuvanje u bazu
			outgoingCallRepository.save(outgoingCall);
			
			//AKo su polja prazna
			/*if((contactPhone.isEmpty() && contactName.isEmpty() && dateOfImport.isEmpty())) {
				
			} 
			else {
			}*/
		}
	}
	
	@SuppressWarnings("unused")
	private void processRowsPhoneRelated(List<XSSFRow> rowList, Map<String, Integer> columnMap, int idTemplate) { //DODATI U ARGUMENTE METODE TEMPLEJT, NAPOMENU, I SVE IZ FORME STO FALI!!!
		String contactPhone = null;																	//POSLE DODATI TE ARGUMENTE U ARGUMENTE KAD SE KREIRA OBJEKAT I SMESTA U BAZU
		String contactName = null;
		String dateOfImport=null;
		DataFormatter formatter = new DataFormatter(Locale.US);
		OutgoingCallTemplate out=outgoingCallTemplateRepository.findById(idTemplate); //trazi templejt po ID
		for (XSSFRow row : rowList) {
			contactName = formatter.formatCellValue(row.getCell(columnMap.get(NAME_SURNAME_COL_NAME)));
			contactPhone = formatter.formatCellValue(row.getCell(columnMap.get(PHONE_NUMBER_COL_NAME)));
			dateOfImport=formatter.formatCellValue(row.getCell(columnMap.get(DATE_COL_NAME))); //dodati ovaj datum u kolonu CREATION_DATE
			OutgoingCall outgoingCall = new OutgoingCall(contactName, contactPhone,null);
			
			//Cuvanje u bazu
			outgoingCallRepository.save(outgoingCall);
			
			//AKo su polja prazna
			/*if((contactPhone.isEmpty() && contactName.isEmpty() && dateOfImport.isEmpty())) {
				
			} 
			else {
			}*/
		}
	}


	
}
