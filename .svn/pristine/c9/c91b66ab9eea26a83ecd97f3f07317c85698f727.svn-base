package net.beotel.controllers;

import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import net.beotel.models.OutgoingCall;
import net.beotel.models.OutgoingCallTemplate;
import net.beotel.payload.response.MessageResponse;
import net.beotel.repository.OutgoingCallRepository;
import net.beotel.repository.OutgoingCallTemplateRepository;
import net.beotel.services.OutgoingCallTemplateService;
import net.beotel.util.ExcelHelper;
import net.beotel.util.OutgoingCallContactList;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/outgoing")
public class OutgoingCallController {

	private static final String PHONE_NUMBER_COL_NAME = "Telefon";
	private static final String NAME_SURNAME_COL_NAME = "Ime";
	
	private static final String PHONE_NUMBER_REGEX="^0([1-3]|6)[0-9]{6,8}$";
	private static final String DATE_FORMAT="dd/MM/yyyy";


	@Autowired
	OutgoingCallRepository outgoingCallRepository;

	@Autowired
	OutgoingCallTemplateRepository outgoingCallTemplateRepository;
	
	@Autowired
	OutgoingCallTemplateService outgoingCallTemplateService;

	/*
	 * @GetMapping("/outgoingCallTemplate")
	 * 
	 * @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
	 * //ovu anotaciju mozemo da koristimo
	 * zahvaljujuci @EnableGlobalMethodSecurity(prePostEnabled = true) public String
	 * outgoingCallTemplateAccess() { // iz WebSecurity konfiguracije! return
	 * "OutgoingCallTemplate Content."; }
	 */

	@GetMapping("/outgoingCallTemplate")
	// @PreAuthorize("hasRole('USER') or hasRole('MODERATOR') or hasRole('ADMIN')")
	// //ovu anotaciju mozemo da koristimo zahvaljujuci
	// @EnableGlobalMethodSecurity(prePostEnabled = true)
	public Iterable<OutgoingCallTemplate> findTemplateList() {
		try {
			Iterable<OutgoingCallTemplate> list = outgoingCallTemplateService.loadAllTempaltes();
			return list;

		} catch (Exception e) {

		}
		return null;
	}
	
	@PostMapping("/outgoingCallTemplate")
	public ResponseEntity<?> createNewTempalte(@RequestBody OutgoingCallTemplate template) {
		outgoingCallTemplateRepository.save(template);
		return ResponseEntity.ok(new MessageResponse("Uspesno snimljen novi templejt u bazu!"));
	}

	

	/*
	 * @GetMapping("/outgoingCallList") public Iterable<OutgoingCallTemplate>
	 * sendTemplateList() { try { Iterable<OutgoingCallTemplate> list =
	 * outgoingCallTemplateRepository.findAll(); return list; } catch (Exception ex)
	 * { } return null;
	 * 
	 * }
	 */	
	
	/*Lista koja vraca stare liste, da bi mogli da je popune*/
	@PostMapping("/oldOutgoingCallList")
	public List<String> sendOldOutgoingCallLists(@RequestBody int templateId){
		List<String> oldList=outgoingCallTemplateService.findOutgoingCallNamesByTemplate(templateId);
		
		return oldList;
	}

	
	/*Obradjuje podatke sa forme (kreiranje liste poziva)*/
	@PostMapping("/postOutgoingCallList")
	public ResponseEntity<?> postOutgoingCallList(@ModelAttribute OutgoingCallContactList list) { 
		String errorMessage="Lista nije prosledjena. ";
		
		List<String> oldList=outgoingCallTemplateService.findOutgoingCallNamesByTemplate(list.getTemplateId());
		
		boolean isExtendingOldList=list.isOldList();
		boolean nameAlreadyExists=false;
		
		
		for(String name:oldList) {
			if(name.equalsIgnoreCase(list.getName())) {
				nameAlreadyExists=true;
			}
		}
				
		/*Ako je izabrana opcija "Nova lista", a naziv liste vec postoji u bazi*/
		if(!isExtendingOldList && nameAlreadyExists) {
			errorMessage+="Naziv liste veÄ‡ postoji. ";
			return ResponseEntity.badRequest().body(new MessageResponse(errorMessage));
		}
		
		
		
		// Dohvatanje fajlova i konvertovanje
		ClassLoader classLoader = getClass().getClassLoader();

		MultipartFile uploadedFile = list.getFile();
		File outgoingCallFile = new File(classLoader.getResource(".").getFile() + "/template.xlsx"); // pronalazi resources paket i cuva fajl do sledeceg builda
		try {
			if (outgoingCallFile.createNewFile()) {
				System.out.println("File is created!");
			} else {
				System.out.println("File already exists.");
			}
			 
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		try {
			uploadedFile.transferTo(outgoingCallFile); // konvertovanje iz MultipartFile u File, da bi moglo da se
														// parsira
		} catch (IllegalStateException | IOException e) {
			e.printStackTrace();
		}

		// Parsiranje fajla
		ExcelHelper excelHelper = new ExcelHelper();
		Map<String, Integer> columnMap = new HashMap<>();
		int idTemplate = list.getTemplateId();
		String listName=list.getName();
		String note=list.getNote();
		
		
		boolean success=true;

		//Procesuiranje redova u fajlu i cuvanje podataka u bazu
		List<XSSFRow> rowList = excelHelper.parseXLSFile(outgoingCallFile, columnMap);
		success=processRowsAndSave(rowList, columnMap, idTemplate,listName,note);
		
		if(success) {
			return ResponseEntity.ok(new MessageResponse("Uspesno prosledjeni podaci."));
		}
		else {
			return ResponseEntity.ok(new MessageResponse("Proverite da li su redovi pravilno popunjeni."));
		}
	}


	/*Obradjuje podatke iz excel fajla i ujedno cuva i ostale podatke u bazu. Vrsi validaciju podataka.*/
	private boolean processRowsAndSave(List<XSSFRow> rowList, Map<String, Integer> columnMap, int idTemplate, String listName,
			String note) {
		String contactPhone = null; 
		String contactName = null;
		String dateOfImport = null;
		List<OutgoingCall> failedRows=new ArrayList<>();
		
		boolean isValid=true;
		
		//Formatiranje podataka iz excela
		DataFormatter formatter = new DataFormatter(Locale.US);
		
		//Dohvata danasnji datum (creation date)
		LocalDate date = LocalDate.now();
	    DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(DATE_FORMAT);
	    dateOfImport = date.format(dateFormatter);
	    LocalDate parsedDate = LocalDate.parse(dateOfImport, dateFormatter);
		
	    //Dohvata templejt na osnovu njegovog ID-a
		Long templateId=Long.valueOf(idTemplate);
		OutgoingCallTemplate out=outgoingCallTemplateRepository.getOne(templateId);
		
		for (XSSFRow row : rowList) {
			contactName = formatter.formatCellValue(row.getCell(columnMap.get(NAME_SURNAME_COL_NAME)));
			contactPhone = formatter.formatCellValue(row.getCell(columnMap.get(PHONE_NUMBER_COL_NAME)));
			
			OutgoingCall outgoingCall = new OutgoingCall(contactName, contactPhone, parsedDate, out, listName,note);
			
			/*Ako nisu popunjena sva polja ili se format telefona ne poklapa sa regexom*/
			if((contactPhone.trim().length()==0 || contactPhone==null) || (contactName.trim().length()==0 || contactName==null) || 
					!contactPhone.matches(PHONE_NUMBER_REGEX)) {
				isValid=false;
				failedRows.add(new OutgoingCall(contactName,contactPhone)); //dodaje u listu sve redove koji nisu prosli validaciju
			}
			/*U suprotnom upisuje validne podatke u bazu*/
			else {
				outgoingCallRepository.save(outgoingCall);
			}

		}
		return isValid;
	}

}
